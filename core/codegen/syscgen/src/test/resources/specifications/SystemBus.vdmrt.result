#pragma once

struct A: public sc_module
{
    SC_CTOR(A)
    {
    }
public:
    sc_in<bool> clk ;
    int clk_frequency ;
    void T(int a);
protected:
private:
    i_host_A * os ;
}

##########
#include "A.h"


void A::T(int a){
/* skip */
}



##########
#pragma once

struct B: public sc_module
{
    SC_CTOR(B)
    {
    }
public:
    sc_in<bool> clk ;
    int clk_frequency ;
    void R();
protected:
private:
    i_host_B * os ;
}

##########
#include "B.h"


void B::R(){
    os->a_T(1);

}



##########
#pragma once

#include <list>
#include <systemc>
#include "System.h"
#include "A.h"
#include "B.h"

public class i_host_A
{
public:
    virtual ~i_host_A();
protected:
private:
}

##########
#include "i_host_A.h"


##########
#pragma once

#include <list>
#include <systemc>
#include "System.h"
#include "A.h"
#include "B.h"

public class i_host_B
{
public:
    virtual void a_T(int a) = 0;
    virtual ~i_host_B();
protected:
private:
}

##########
#include "i_host_B.h"



##########
#pragma once

struct cpu_y: public sc_module, public i_host_B
{
    SC_CTOR(cpu_y)
    {
        b.clk(clk);
        b.clk_frequency = clk_frequency;
        transfer_input.register_b_transport(this, &cpu_y::transfer_input_handler);
    }
public:
    B b  = B("cpu_y.b");
    sc_clock clk  = sc_clock("cpu_y.clk", 100);
    int clk_frequency  = 100;
    tlm_utils::simple_initiator_socket<cpu_y> transfer_output ;
    tlm_utils::simple_target_socket<cpu_y> transfer_input ;
    void a_T(int a);
    void transfer_input_handler(tlm::tlm_generic_payload & payload, sc_time & delay);
protected:
private:
    template<typename result, typename params>
result write_transfer(int destination, int method, params parameters);
    template<typename params>
void write_transfer_void(int destination, int method, params parameters);
}

##########
#include "cpu_y.h"


void cpu_y::a_T(int a){
    write_transfer_void<int>(transfer_ids::a, exposed_methods_A::T, a);

}

void cpu_y::transfer_input_handler(tlm::tlm_generic_payload & payload, sc_time & delay)
{
    tlm::tlm_command cmd = payload.get_command();
    sc_dt::uint64    adr = payload.get_address();
    unsigned char*   ptr = payload.get_data_ptr();
    unsigned int     len = payload.get_data_length();
    unsigned char*   byt = payload.get_byte_enable_ptr();
    unsigned int     wid = payload.get_streaming_width();
    int module, method;
    split_address(adr, module, method);
    switch(module)
    {
case deployed_modules_cpu_y_t::a:
    switch(method)
    {
    default:
        payload.set_response_status(tlm::TLM_COMMAND_ERROR_RESPONSE);
        return;
    }
    break;
        default:
            payload.set_response_status(tlm::TLM_COMMAND_ERROR_RESPONSE);
            return;
    }

    payload.set_response_status(tlm::TLM_OK_RESPONSE);
}

template<typename result, typename params>
result cpu_y::write_transfer(int destination, int method, params parameters)
{
	sc_time delay = sc_time(10, SC_NS);
	tlm::tlm_generic_payload * payload = new tlm::tlm_generic_payload;
	tlm::tlm_command cmd = tlm::tlm_command::TLM_IGNORE_COMMAND;
	payload->set_command(cmd);
	sc_dt::uint64 address = (((sc_dt::uint64)destination) << 32) + method;
	payload->set_address(address);
	payload->set_data_ptr(reinterpret_cast<unsigned char*>(&parameters));
	payload->set_data_length(sizeof(params));
	payload->set_streaming_width(4);
	payload->set_byte_enable_ptr(0);
	payload->set_dmi_allowed(false);
	payload->set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);

	transfer_output->b_transport(*payload, delay);

	result r = *(reinterpret_cast<result *>(payload->get_data_ptr()));
	delete payload;
	return r;
}

template<typename params>
void cpu_y::write_transfer_void(int destination, int method, params parameters)
{
	write_transfer<char, params>(destination, method, parameters);
}



##########
#pragma once

struct cpu_virtual: public sc_module
{
    SC_CTOR(cpu_virtual)
    {
    }
public:
    sc_clock clk  = sc_clock("cpu_virtual.clk", 1000000000000);
    int clk_frequency  = 1000000000000;
protected:
private:
}

##########
#include "cpu_virtual.h"




##########
#pragma once

struct cpu_x: public sc_module, public i_host_A
{
    SC_CTOR(cpu_x)
    {
        a.clk(clk);
        a.clk_frequency = clk_frequency;
        transfer_input.register_b_transport(this, &cpu_x::transfer_input_handler);
    }
public:
    A a  = A("cpu_x.a");
    sc_clock clk  = sc_clock("cpu_x.clk", 100);
    int clk_frequency  = 100;
    tlm_utils::simple_initiator_socket<cpu_x> transfer_output ;
    tlm_utils::simple_target_socket<cpu_x> transfer_input ;
    void transfer_input_handler(tlm::tlm_generic_payload & payload, sc_time & delay);
protected:
private:
    template<typename result, typename params>
result write_transfer(int destination, int method, params parameters);
    template<typename params>
void write_transfer_void(int destination, int method, params parameters);
}

##########
#include "cpu_x.h"


void cpu_x::transfer_input_handler(tlm::tlm_generic_payload & payload, sc_time & delay)
{
    tlm::tlm_command cmd = payload.get_command();
    sc_dt::uint64    adr = payload.get_address();
    unsigned char*   ptr = payload.get_data_ptr();
    unsigned int     len = payload.get_data_length();
    unsigned char*   byt = payload.get_byte_enable_ptr();
    unsigned int     wid = payload.get_streaming_width();
    int module, method;
    split_address(adr, module, method);
    switch(module)
    {
case deployed_modules_cpu_x_t::b:
    switch(method)
    {
    case exposed_methods_B_t::T:
    this->a.T(*reinterpret_cast<int *>(ptr));
    break;
    default:
        payload.set_response_status(tlm::TLM_COMMAND_ERROR_RESPONSE);
        return;
    }
    break;
        default:
            payload.set_response_status(tlm::TLM_COMMAND_ERROR_RESPONSE);
            return;
    }

    payload.set_response_status(tlm::TLM_OK_RESPONSE);
}

template<typename result, typename params>
result cpu_x::write_transfer(int destination, int method, params parameters)
{
	sc_time delay = sc_time(10, SC_NS);
	tlm::tlm_generic_payload * payload = new tlm::tlm_generic_payload;
	tlm::tlm_command cmd = tlm::tlm_command::TLM_IGNORE_COMMAND;
	payload->set_command(cmd);
	sc_dt::uint64 address = (((sc_dt::uint64)destination) << 32) + method;
	payload->set_address(address);
	payload->set_data_ptr(reinterpret_cast<unsigned char*>(&parameters));
	payload->set_data_length(sizeof(params));
	payload->set_streaming_width(4);
	payload->set_byte_enable_ptr(0);
	payload->set_dmi_allowed(false);
	payload->set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);

	transfer_output->b_transport(*payload, delay);

	result r = *(reinterpret_cast<result *>(payload->get_data_ptr()));
	delete payload;
	return r;
}

template<typename params>
void cpu_x::write_transfer_void(int destination, int method, params parameters)
{
	write_transfer<char, params>(destination, method, parameters);
}



##########
#pragma once

struct transfer: public sc_module
{
    SC_CTOR(transfer)
    {
        for(int i = 0; i < TRANSFER_IDENTIFIER_COUNT; i++)
        {
            inputs[i].register_b_transport(this, &transfer::b_transfer, i);
        }
    }

public:
    tlm_utils::simple_target_socket_tagged<transfer> inputs[TRANSFER_IDENTIFIER_COUNT];
    tlm_utils::simple_initiator_socket_tagged<transfer> outputs[TRANSFER_IDENTIFIER_COUNT];
    void b_transfer(int origin, tlm::tlm_generic_payload & trans, sc_time & delay);
private:
    sc_dt::uint64 resolve_address(sc_dt::uint64 address, sc_dt::uint64 & masked_address);
    sc_mutex bus_mutex;
    tlm::tlm_phase phase = tlm::BEGIN_REQ;
    sc_time bus_speed = sc_time(100, SC_NS);
};
##########
#include "transfer.h"

void transfer::b_transfer(int origin, tlm::tlm_generic_payload & payload, sc_time & delay)
{
	sc_dt::uint64 address = payload.get_address();
	sc_dt::uint64 masked_address;
	sc_dt::uint64 target = resolve_address(address, masked_address);
	bus_mutex.lock();
	payload.set_address(masked_address);
	outputs[target]->b_transport(payload, bus_speed);
	channel_mutex.unlock();
}

sc_dt::uint64 transfer::resolve_address(sc_dt::uint64 address, sc_dt::uint64 & masked_address)
{
	masked_address = 0x00000000FFFFFFFF & address;
	return address >> 32;
}
##########
#pragma once

struct bus_virtual: public sc_module
{
    SC_CTOR(bus_virtual)
    {
        for(int i = 0; i < BUS_VIRTUAL_IDENTIFIER_COUNT; i++)
        {
            inputs[i].register_b_transport(this, &transfer::b_transfer, i);
        }
    }

public:
    tlm_utils::simple_target_socket_tagged<bus_virtual> inputs[BUS_VIRTUAL_IDENTIFIER_COUNT];
    tlm_utils::simple_initiator_socket_tagged<bus_virtual> outputs[BUS_VIRTUAL_IDENTIFIER_COUNT];
    void b_transfer(int origin, tlm::tlm_generic_payload & trans, sc_time & delay);
private:
    sc_dt::uint64 resolve_address(sc_dt::uint64 address, sc_dt::uint64 & masked_address);
    sc_mutex bus_mutex;
    tlm::tlm_phase phase = tlm::BEGIN_REQ;
    sc_time bus_speed = sc_time(1000000000000, SC_NS);
};
##########
#include "bus_virtual.h"

void bus_virtual::b_transfer(int origin, tlm::tlm_generic_payload & payload, sc_time & delay)
{
	sc_dt::uint64 address = payload.get_address();
	sc_dt::uint64 masked_address;
	sc_dt::uint64 target = resolve_address(address, masked_address);
	bus_mutex.lock();
	payload.set_address(masked_address);
	outputs[target]->b_transport(payload, bus_speed);
	channel_mutex.unlock();
}

sc_dt::uint64 bus_virtual::resolve_address(sc_dt::uint64 address, sc_dt::uint64 & masked_address)
{
	masked_address = 0x00000000FFFFFFFF & address;
	return address >> 32;
}
##########
#pragma once

struct System: public sc_module
{
    SC_CTOR(System)
    {
        x.transfer_outputs.bind(transfer.outputs[TRANSFER_IDENTIFIER::x]);
        x.transfer_inputs.bind(transfer.inputs[TRANSFER_IDENTIFIER::x]);
        y.transfer_outputs.bind(transfer.outputs[TRANSFER_IDENTIFIER::y]);
        y.transfer_inputs.bind(transfer.inputs[TRANSFER_IDENTIFIER::y]);
        cpu_y.bus_virtual_outputs.bind(bus_virtual.outputs[BUS_VIRTUAL_IDENTIFIER::cpu_y]);
        cpu_y.bus_virtual_inputs.bind(bus_virtual.inputs[BUS_VIRTUAL_IDENTIFIER::cpu_y]);
        cpu_virtual.bus_virtual_outputs.bind(bus_virtual.outputs[BUS_VIRTUAL_IDENTIFIER::cpu_virtual]);
        cpu_virtual.bus_virtual_inputs.bind(bus_virtual.inputs[BUS_VIRTUAL_IDENTIFIER::cpu_virtual]);
        cpu_x.bus_virtual_outputs.bind(bus_virtual.outputs[BUS_VIRTUAL_IDENTIFIER::cpu_x]);
        cpu_x.bus_virtual_inputs.bind(bus_virtual.inputs[BUS_VIRTUAL_IDENTIFIER::cpu_x]);
    }
public:
    cpu_x x  = cpu_x("System.x");
    cpu_y y  = cpu_y("System.y");
    bus_transfer transfer  = bus_transfer("System.transfer");
protected:
private:
}

##########
#include "System.h"


int main()
{
    System top = System("System";

    sc_trace_file *tf;
    tf->sc_create_vcd_trace_file("WaveForm");
    tf->set_time_unit(1,SC_MS);
    // Include desired waveform signals here.
    sc_start(1, SC_SEC);

    sc_close_vcd_trace_file(tf);
    return 0;
}


##########