#pragma once

struct Counter: public sc_module
{
    SC_CTOR(Counter)
    {
        SC_CTHREAD(thread)
        sensitive << clk;
    }
public:
    int counter  = 0;
    sc_in<bool> clk ;
    int clk_frequency ;
    void increment();
    void thread();
protected:
private:
    sc_mutex mutex ;
    i_host_Counter * os ;
}

##########
#include "Counter.h"


void Counter::increment(){
    mutex.lock();
    counter = counter + 1;
wait(10 * clk_frequency * 1.0E-9f);
    mutex.unlock();

}


void Counter::thread() {
    wait(0 * clk_frequency * 1.0E-9f);
    while(true) {
        increment();
        wait(std::min(100 + (2.0 * (double)150 * (((double)std::rand() % 2.0) - 1.0)), 10) * clk_frequency * 1.0E-9f);
    }
}

##########
#pragma once

#include <list>
#include <systemc>
#include "Periodic.h"
#include "Counter.h"

public class i_host_Counter
{
public:
    virtual ~i_host_Counter();
protected:
private:
}

##########
#include "i_host_Counter.h"


##########
#pragma once

struct cpu_processor: public sc_module, public i_host_Counter
{
    SC_CTOR(cpu_processor)
    {
        counter.clk(clk);
        counter.clk_frequency = clk_frequency;
    }
public:
    Counter counter  = Counter("cpu_processor.counter");
    sc_clock clk  = sc_clock("cpu_processor.clk", 100000);
    int clk_frequency  = 100000;
protected:
private:
}

##########
#include "cpu_processor.h"




##########
#pragma once

struct cpu_virtual: public sc_module
{
    SC_CTOR(cpu_virtual)
    {
    }
public:
    sc_clock clk  = sc_clock("cpu_virtual.clk", 1000000000000);
    int clk_frequency  = 1000000000000;
protected:
private:
}

##########
#include "cpu_virtual.h"




##########
#pragma once

struct bus_virtual: public sc_module
{
    SC_CTOR(bus_virtual)
    {
        for(int i = 0; i < BUS_VIRTUAL_IDENTIFIER_COUNT; i++)
        {
            inputs[i].register_b_transport(this, &transfer::b_transfer, i);
        }
    }

public:
    tlm_utils::simple_target_socket_tagged<bus_virtual> inputs[BUS_VIRTUAL_IDENTIFIER_COUNT];
    tlm_utils::simple_initiator_socket_tagged<bus_virtual> outputs[BUS_VIRTUAL_IDENTIFIER_COUNT];
    void b_transfer(int origin, tlm::tlm_generic_payload & trans, sc_time & delay);
private:
    sc_dt::uint64 resolve_address(sc_dt::uint64 address, sc_dt::uint64 & masked_address);
    sc_mutex bus_mutex;
    tlm::tlm_phase phase = tlm::BEGIN_REQ;
    sc_time bus_speed = sc_time(1000000000000, SC_NS);
};
##########
#include "bus_virtual.h"

void bus_virtual::b_transfer(int origin, tlm::tlm_generic_payload & payload, sc_time & delay)
{
	sc_dt::uint64 address = payload.get_address();
	sc_dt::uint64 masked_address;
	sc_dt::uint64 target = resolve_address(address, masked_address);
	bus_mutex.lock();
	payload.set_address(masked_address);
	outputs[target]->b_transport(payload, bus_speed);
	channel_mutex.unlock();
}

sc_dt::uint64 bus_virtual::resolve_address(sc_dt::uint64 address, sc_dt::uint64 & masked_address)
{
	masked_address = 0x00000000FFFFFFFF & address;
	return address >> 32;
}
##########
#pragma once

struct Periodic: public sc_module
{
    SC_CTOR(Periodic)
    {
        cpu_processor.bus_virtual_outputs.bind(bus_virtual.outputs[BUS_VIRTUAL_IDENTIFIER::cpu_processor]);
        cpu_processor.bus_virtual_inputs.bind(bus_virtual.inputs[BUS_VIRTUAL_IDENTIFIER::cpu_processor]);
        cpu_virtual.bus_virtual_outputs.bind(bus_virtual.outputs[BUS_VIRTUAL_IDENTIFIER::cpu_virtual]);
        cpu_virtual.bus_virtual_inputs.bind(bus_virtual.inputs[BUS_VIRTUAL_IDENTIFIER::cpu_virtual]);
    }
public:
    cpu_processor processor  = cpu_processor("Periodic.processor");
protected:
private:
}

##########
#include "Periodic.h"


int main()
{
    Periodic top = Periodic("Periodic";

    sc_trace_file *tf;
    tf->sc_create_vcd_trace_file("WaveForm");
    tf->set_time_unit(1,SC_MS);
    // Include desired waveform signals here.
    sc_start(1, SC_SEC);

    sc_close_vcd_trace_file(tf);
    return 0;
}


##########