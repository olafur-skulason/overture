#set($name = '"' + $SystemcFormat.getName($node) + '.h"')
\#include $name

#foreach ($method in $node.getMethods())
#if (!$method.getIsConstructor())
$SystemcFormat.format($method)##
#if ($SystemcFormat.isSocketHandler($method))
#set($colons = '::')
#set($cases = $method.getBody().getStatements())
{
    tlm::tlm_command cmd = payload.get_command();
    sc_dt::uint64    adr = payload.get_address();
    unsigned char*   ptr = payload.get_data_ptr();
    unsigned int     len = payload.get_data_length();
    unsigned char*   byt = payload.get_byte_enable_ptr();
    unsigned int     wid = payload.get_streaming_width();
    int module, method;
    $SystemcFormat.getBusNameInputHandler($method)${colons}split_address(adr, module, method);
    switch(module)
    {
#foreach( $stm in $cases)
$SystemcFormat.format($stm)
#end
        default:
            payload.set_response_status(tlm${colons}TLM_COMMAND_ERROR_RESPONSE);
            return;
    }

    payload.set_response_status(tlm${colons}TLM_OK_RESPONSE);
}
#elseif ($SystemcFormat.isSocketWrite($method))
#set ($busName = $SystemcFormat.getBusNameSocketWrite($method))
{
	sc_time delay = sc_time(10, SC_NS);
	tlm::tlm_generic_payload * payload = new tlm::tlm_generic_payload;
	tlm::tlm_command cmd = tlm::tlm_command::TLM_IGNORE_COMMAND;
	payload->set_command(cmd);
	sc_dt::uint64 address = (((sc_dt::uint64)destination) << 32) + method;
	payload->set_address(address);
	payload->set_data_ptr(reinterpret_cast<unsigned char*>(&parameters));
	payload->set_data_length(sizeof(params));
	payload->set_streaming_width(4);
	payload->set_byte_enable_ptr(0);
	payload->set_dmi_allowed(false);
	payload->set_response_status(tlm::TLM_INCOMPLETE_RESPONSE);

	${busName}_output->b_transport(*payload, delay);

	result r = *(reinterpret_cast<result *>(payload->get_data_ptr()));
	delete payload;
	return r;
}
#elseif ($SystemcFormat.isSocketWriteVoid($method))
#set ($busName = $SystemcFormat.getBusNameSocketWrite($method))
{
	write_${busName}<char, params>(destination, method, parameters);
}
#end
#end
#end

#if ($node.getTop())
int main()
{
    $SystemcFormat.getName($node) top = $SystemcFormat.getName($node)("$SystemcFormat.getName($node)");

    sc_trace_file *tf;
    tf->sc_create_vcd_trace_file("WaveForm");
    tf->set_time_unit(1,SC_MS);
    // Include desired waveform signals here.
    sc_start(1, SC_SEC);

    sc_close_vcd_trace_file(tf);
    return 0;
}
#end

#if(!$SystemcFormat.isNull($node.getCThreads()))
#set ($thread = $node.getCThreads())
void $SystemcFormat.getName($node)::thread() {
    wait($thread.getOffset() * clk_frequency * 1.0E-9f);
    while(true) {
        $thread.getMethod()();
        wait(std::min($thread.getPeriod() + (2.0 * (double)$thread.getJitter() * (((double)std::rand() % 2.0) - 1.0)), $thread.getDelay()) * clk_frequency * 1.0E-9f);
    }
}
#end